# nested list generator
a = [f"{i}*{j} = {i * j}"
     for i in range(13) if i % 3 == 0
     for j in range(14) if j % 2 == 0
     ]
print(a)

matrix = [[0, 1, 2, 3],
          [4, 5, 6, 7],
          [8, 9, 10, 11]]
a = [x
     for row in matrix
     for x in row]
print(a)

M, N = 3, 4
matrix = [[a for a in range(1, M + 1)] for b in range(1, N + 1)]
print(matrix)

matrix = [[x ** 2 for x in row] for row in matrix]
print(matrix)
mat = [x ** 2 for row in matrix for x in row]
print(matrix)
g = [u ** 2 for u in [x + 1 for x in range(5)]]  # nested list generator
print(g)

###########################################################
# Вводится двумерный список в виде таблицы целых чисел (см. пример ниже).
# С помощью list comprehension преобразовать двумерный список в одномерный
# так, чтобы значения элементов шли в обратном порядке. Результат отобразить
# в виде строки из чисел, записанных через пробел.
# P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
# lst_in = [
#     [1, 2, 3, 4],
#     [5, 6, 7, 8],
#     [9, 8, 7, 6],
#     [5, 4, 3, 2],
# ]
#
# lst_in = [x
#           for row in lst_in
#           for x in row]
# lst_in.reverse()
# print(*lst_in)

#Вводится список целых чисел в строку через пробел. С помощью list comprehension
# сформировать из них двумерный список lst размером N x N (квадратную таблицу
# чисел). Гарантируется, что из набора введенных чисел можно сформировать
# квадратную матрицу (таблицу). Результат отобразить в виде списка командой:
# print(lst)
# lst = list(map(int, input().split()))
# n = int(len(lst)**0.5)
# print([lst[x:x+n] for x in range(0, len(lst), n)])

#Используйте следующий список из строк:
t = ["– Скажи-ка, дядя, ведь не даром",
    "Я Python выучил с каналом",
    "Балакирев что раздавал?",
    "Ведь были ж заданья боевые,",
    "Да, говорят, еще какие!",
    "Недаром помнит вся Россия",
    "Как мы рубили их тогда!"
    ]
#Необходимо преобразовать его в двумерный (вложенный) список lst, где каждая
# строка представляется списком из слов (слова разделяются пробелом), но
# сохранять слова только длиной более трех символов. Решить данную задачу с
# использованием list comprehension.
lst = [
    [x for x in l.split() if len(x) > 3]
    for l in [s for s in t]
]
print(lst)

#овторите задачу с транспонированием прямоугольной матрицы с помощью list
# comprehension, изложенной в видео-уроке к этой практике. На вход поступает
# таблица целых чисел, на выходе нужно отобразить эту же таблицу в
# транспонированном виде (строки заменяются на столбцы), используя команду:
#for row in A:
    # print(*row)
#где A - транспонированный двумерный список. Желательно сделать эту задачу не
# пересматривая видео.
# lst_in = [
#     [1, 2, 3],
#     [4, 5, 6],
#     [7, 8, 9],
#     [5, 4, 3]
# ]
# A = [[row[i] for row in lst_in] for i in range(len(lst_in[0]))]
# for row in A:
#     print(*row)
