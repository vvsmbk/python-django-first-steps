# return operator
def get_sqrt(x):
    res = None if x < 0 else x ** 0.5
    return res, x


a, b = get_sqrt(49)
print(a, b)

perimetr = False
if perimetr:
    def get_rect(a, b):
        return 2 * (a + b)
else:
    def get_rect(a, b):
        return a * b


def get_rect(a, b):
    return a * b


def get_rect(a, b):  # в таком случае будет вызвана самая последняя
    return 2 * (a + b)  # функция с этим названием


print(get_rect(1.5, 3.8))


def even(x):
    return x % 2 == 0


for i in range(1, 20):
    if even(i):
        print(i)


########################################

# Объявите функцию, которая принимает один аргумент (вещественное число), и
# возвращает квадрат этого числа. После объявления функции прочитайте (с
# помощью функции input) вещественное число и вызовите функцию с этим значением.
# Выведите на экран результат работы функции.
# def get_square(n):
#     return n ** 2
#
#
# print(get_square(float(input())))

# Объявите функцию с именем is_triangle, которая принимает три стороны
# треугольника (целые числа) и проверяет, можно ли из переданных аргументов
# составить треугольник. (Напомню, что у любого треугольника длина третьей
# стороны всегда должна быть меньше суммы двух других). Если  проверка проходит,
# вернуть булево значение True, иначе - значение False.
# Вызывать функцию не нужно, только задать.
# def is_triangle(a, b, c):
#     if c < a + b:
#         return True
#     else:
#         return False
#
#
# a, b, c = map(int, input().split())
# is_triangle(a, b, c)

# Объявите функцию с именем is_large, которая принимает строку (в качестве
# аргумента) и возвращает False, если длина строки меньше трех символов. Иначе
# возвращается значение True.
# Вызывать функцию не нужно, только объявить.
# def is_large(s):
#     if len(s) < 3:
#         return False
#     else:
#         return True

# Объявите функцию для проверки числа на четность (возвращается True, если
# переданное число четное и False, если число нечетное).
# После объявления функции в цикле необходимо считывать целое числовое значение
# (функцией input), пока не поступит число 1. Если прочитанное значение четное
# (проверяется с помощью заданной функции), то оно выводится на экран (в столбик,
# то есть, каждое значение с новой строки).
# def even(x):
#     return x % 2 == 0
#
#
# n = -1
# while n != 1:
#     n = int(input())
#     if n == 1:
#         break
#     if even(n):
#         print(n)

# Объявите функцию для проверки числа на нечетность (возвращается True, если
# переданное число нечетное и False, если число четное).
# После объявления функции прочитайте (с помощью функции input) список целых
# значений, записанных в одну строку через пробел. И, используя генератор
# списков и созданную функцию, сформируйте список из нечетных значений на
# основе введенного исходного списка. Результат отобразите на экране командой:
# print(*lst), где lst - сформированный список из нечетных значений.
# def not_even(x):
#     return x % 2 != 0
#
#
# lst = list(map(int, input().split()))
# res = []
# for i in lst:
#     if not_even(i):
#         res.append(i)
#
# print(*res)

# Вводится слово в переменную tp. Если это слово RECT, то следует объявить
# функцию с именем get_sq с двумя параметрами, вычисляющую площадь
# прямоугольника и возвращающую вычисленное значение. (На экран она ничего
# не должна выводить, только возвращать значение).
# Если же введенное слово не RECT (любое другое), то объявляется функция с
# тем же именем get_sq, с одним параметром для вычисления площади квадрата
# (формула: a*a). Вычисленное значение возвращается функцией. (Она также
# ничего не выводит на экран).
# Примечание: в программе должна быть задана только одна функция с именем
# get_sq в зависимости от введенного слова. Вызывать функцию не нужно, только
# объявлять.
# tp = input()
# if tp == "RECT":
#     def get_sq(a,b):
#         return a * b
# else:
#     def get_sq(a):
#         return a * a

# Объявите функцию, которая принимает строку (в качестве аргумента) и возвращает
# False, если длина строки меньше 6 символов. Иначе возвращается значение True.
# После объявления функции прочитайте (с помощью функции input) список названий
# городов, записанных в одну строку через пробел. Затем, используя генератор
# списка и созданную функцию, сформируйте список из названий городов длиной не
# менее шести символов на основе введенного исходного списка. Результат
# отобразите на экране командой:
# print(*lst) где lst - итоговый сформированный список.
# def get_str(s):
#     if len(s) < 6:
#         return False
#     else:
#         return True
#
#
# s = input()
# lst = [x for x in s.split() if get_str(x)]
# print(*lst)

# Объявите функцию, которая принимает строку (в качестве аргумента) и
# возвращает два значения в виде кортежа: переданная строка и ее длина.
# После объявления функции прочитайте (с помощью функции input) список названий
# городов, записанных в одну строку через пробел. Затем, используя генератор
# словарей и созданную функцию, сформируйте словарь d в формате:
# d = {<город 1>: <число символов>, ..., <город N>: <число символов>}
# Выведите этот словарь в порядке возрастания длин строк с помощью команд:
# a = sorted(d, key=lambda x: d[x])
# print(*a)
# Пока просто запишите эти команды. Как они работают станет ясно позже, когда
# мы подробнее изучим функции сортировки и работу оператора *.
# def get_dict(s):
#     return s,len(s)
#
# s = list(input().split())
# d = {get_dict(x)[0]: get_dict(x)[1]  for x in s}
# a = sorted(d, key=lambda x: d[x])
# print(*a)

# Вводится список целых чисел в одну строчку через пробел. Необходимо задать
# функцию, которая принимает два аргумента (максимальное и минимальное значения
# из списка) и возвращает их произведение. Вызовите эту функцию и отобразите на
# экране полученное числовое значение.
# Подсказка: для передачи аргументов функции используйте функции max и min для
# введенного списка чисел.
# def get_mult(a, b):
#     return a * b
#
#
# lst = list(map(int, input().split()))
# print(get_mult(max(lst), min(lst)))

