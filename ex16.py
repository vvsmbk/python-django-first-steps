#while, break, continue
N = 1000
s = 0
i = 1

while i <= N:
    s += i
    i += 1

print(s)

print("запуск цикла")
i = 0
while True:
    i += 1
    break

print("завершение цикла")

d = [1, 5, 3, 6, 0, -4]
flFind = False
i = 0
while i < len(d):
    flFind = d[i] % 2 == 0
    if flFind:
        break
    i += 1

print(flFind)


s = 0
d = 1

# while d != 0:
#     d = int(input("Введите целое число:"))
#     if d % 2 == 0:
#         continue        # пропускает всё, что есть в теле цикла ниже и
#                         # продолжает цикл
#     s += d
#     print("s = " + str(s))

# s = 1/2 + 1/3 + 1/4 + ... + 1/0

S = 0
i = -10

while i < 0:
    if i == 0:
        break
    S += 1/i
    i += 1
else:                   # срабатывает после ШТАТНОГО завершения цикла
    print("Сумма вычислена корректно")

print(S)

#############################
#Вводятся два целых положительных числа n и m, причем, n < m.
# Вывести в строку через пробел квадраты целых чисел в диапазоне [n; m].
# Программу реализовать при помощи цикла while.
# n, m = map(int, input().split())
# i = n
# lst = []
# while i <= m:
#     lst.append(i**2)
#     i += 1
# print(*lst)

#Вводится стоимость одной книги x рублей (вещественное число).
# Необходимо вывести на экран в строчку через пробел стоимости 2, 3, ... 10
# таких книг с точностью до десятых. Программу реализовать при помощи цикла
# while.
# n = float(input())
# i = 2
# lst = []
# while i <= 10:
#     lst.append(round(n*i, 1))
#     i += 1
#
# print(*lst)

#Вводится целое положительное число n. Вычислить и вывести на экран
# сумму: 1 + 1/2 + 1/3 + ... + 1/n с точностью до тысячных
# (три знака после запятой). Программу реализовать при помощи цикла while.
# n = int(input())
# s = 1
# i = 2
# while i <= n:
#     s += 1/i
#     i += 1
#
# print(round(s, 3))

#На каждой итерации цикла пользователь вводит целое число.
# Цикл продолжается, пока не встретится число 0. Необходимо
# вычислить сумму введенных в цикле чисел и вывести результат на
# экран. Программу реализовать при помощи цикла while.
# s = 0
# i = -1
# while i != 0:
#     i = int(input())
#     s += i
# print(s)

# Вводится строка (слаг). Замените в этой строке все подряд
# идущие дефисы (--, ---, ---- и т.д.) на одинарные (-).
# Результат преобразования строки выведите на экран. Программу
# реализовать при помощи цикла while.

# s = input()
# s = list(s)
# i = 0
# while i < len(s):
#     if s[i] == '-' and s[i+1] == '-':
#        del s[i]
#        continue
#     elif s[i] == '-' and s[i+1] == None:
#         break
#     i += 1
#
# print(*s)

#Вводится натуральное (то есть, целое положительное) число
# (от трехзначного и более). Найти произведение всех его цифр.
# Результат вывести на экран. Программу реализовать при помощи цикла while.
# n = list(input())
# i = 0
# res = 1
# while i < len(n):
#     res *= int(n[i])
#     i += 1
#
# print(res)

#Последовательность Фибоначчи образуется так:
# первые два числа равны 1 и 1, а каждое последующее
# равно сумме двух предыдущих. Имеем такую последовательность
# чисел: 1, 1, 2, 3, 5, 8, 13, ... Постройте последовательность
# Фибоначчи длиной n (n вводится с клавиатуры). Результат отобразите
# в виде строки полученных чисел, записанных через пробел. Программу
# реализовать при помощи цикла while.
# n = int(input())
# lst = [1, 1]
# i = 2
#
# while i < n:
#     lst.append(lst[i-1]+lst[i-2])
#     i += 1
# print(*lst)

#Одноклеточная амеба каждые 3 часа делится на 2 клетки.
# Определить, сколько клеток будет через n часов (n -
# целое положительное число, вводимое с клавиатуры). Считать,
# что изначально была одна амеба. Результат вывести на экран.
# Задачу необходимо решить с использованием цикла while.
# n = int(input())
# i = 1
# count = 1
# while i <= n:
#     if i % 3 == 0:
#         count *= 2
#     i += 1
# print(count)

#Гражданин 1 января открыл счет в банке, вложив 1000 руб.
# Каждый год размер вклада увеличивается на 5% от имеющейся суммы.
# Определить сумму вклада через n лет (n - целое положительное число,
# вводимое с клавиатуры). Результат округлить до сотых и вывести на экран.
# Программу реализовать при помощи цикла while.
# n = int(input())
# count = 1000
# i = 0
# while i != n:
#     count = count + (count * 0.05)
#     i += 1
#
# print(round(count, 2))

#Вводятся два натуральных четных числа n и m в одну строчку
# через пробел, причем n < m. Напечатать все нечетные числа
# из интервала [n, m]. Задачу решить без применения условного
# оператора. Результат вывести на экран в виде строки чисел,
# записанных через пробел. Программу реализовать при помощи цикла while.
# n, m = map(int, input().split())
# lst = []
# while n != m:
#     n += 1
#     lst.append(n)
#     n += 1
# print(*lst)

#Составить программу поиска всех трехзначных чисел,
# которые при делении на 47 дают в остатке 43 и кратны 3.
# Вывести найденные числа в строчку через пробел. Программу
# реализовать при помощи цикла while.
# lst = []
# i = 100
# while i != 999:
#     if i % 47 == 43 and i % 3 == 0:
#         lst.append(i)
#     i += 1
# print(*lst)

#Имеется одномерный список длиной 10 элементов, состоящий из нулей:
# p = [0] * 10
#На каждой итерации цикла пользователь вводит целое число -
# индекс элемента списка p, по которому записывается значение 1,
# если ее там еще нет. Если же 1 уже проставлена, то список не
# менять и снова запросить у пользователя очередное число. Необходимо
# расставить так пять единиц в список. (После этого цикл прерывается).
#Программу реализовать с помощью цикла while и
# с использованием оператора continue, когда 1 не может
# быть добавлена в список. Результат вывести на экран в
# виде последовательности чисел, записанных через пробел.
# p = [0] * 10
# i = 0
# n = 0
# while i != 5:
#     n = int(input())
#     if p[n] == 1:
#         continue
#     else:
#         i += 1
#         p[n] = 1
# print(*p)

#На каждой итерации цикла вводится целое число.
# Необходимо подсчитать произведение только положительных чисел,
# до тех пор, пока не будет введено значение 0. Реализовать пропуск
# вычислений с помощью оператора continue, а также использовать цикл
# while. Результат произведения вывести на экран.
# count = 1
# n = -1
# while n != 0:
#     n = int(input())
#     if n > 0:
#         count *= n
#     else:
#         continue
# print(count)

#Вводится список названий городов в одну строчку
# через пробел. Определить, что в этом списке все
# города имеют длину более 5 символов. Реализовать
# программу с использованием цикла while и оператора
# break. Вывести ДА, если условие выполняется и НЕТ - в противном случае.
# lst = list(input().split())
# i = 0
# counter = 0
# while True:
#     if i < len(lst):
#         if len(lst[i]) >= 5:
#             counter += 1
#         if counter == len(lst) and i == len(lst)-1:
#             print("ДА")
#             break
#         elif counter != len(lst) and i == len(lst)-1:
#             print("НЕТ")
#             break
#         i += 1

#Вводится список имен студентов в одну
# строчку через пробел. Определить, что хотя
# бы одно имя в этом списке начинается и заканчивается на
# ту же самую букву (без учета регистра). Реализовать программу с
# использованием цикла while и оператора break. Вывести ДА, если условие
# выполняется и НЕТ - в противном случае.
# lst = list(input().split())
# i = 0
# while i < len(lst):
#     if lst[i][0].lower() == lst[i][-1].lower():
#         print("ДА")
#         break
#     else:
#         i += 1
#     if i == len(lst):
#         print("НЕТ")
#         break

#Вводится натуральное число n (то есть, целое положительное).
# В цикле перебрать все целые числа в интервале [1; n] и сформировать
# список из чисел, кратных 3 и 5 одновременно. Вывести полученную
# последовательность чисел в виде строки через пробел, если значение
# n меньше 100. Иначе вывести на экран сообщение "слишком большое значение
# n" (без кавычек). Использовать в программе оператор else после цикла
# while.
# n = int(input())
# i = 1
# lst = []
# while i <= n:
#     if n >= 100:
#         print("слишком большое значение n")
#         break
#     if i % 3 == 0 and i % 5 == 0:
#         lst.append(i)
#     i += 1
# else:
#     print(*lst)

#Вводится натуральное число n. Вывести первое найденное натуральное
# число (то есть, перебирать числа, начиная с 1), квадрат которого
# больше значения n. Реализовать программу с использованием цикла while.
# n = int(input())
# i = 1
# while i**2 <= n:
#    i += 1
# print(i)

#Начав тренировки, лыжник в первый день пробежал 10 км.
# Каждый следующий день он увеличивал пробег на 10 % от пробега
# предыдущего дня. Определить в какой день он пробежит больше x км
# (натуральное число x вводится с клавиатуры). Результат (искомый день)
# вывести на экран.
# n = 10
# x = int(input())
# day = 1
# while True:
#     if n > x:
#         print(day)
#         break
#     else:
#         n = n + (n * 0.1)
#         day += 1

#Вводятся названия книг (каждое с новой строки).
# Удалить из введенного списка все названия, состоящие из двух и
# более слов (слова в названиях разделяются пробелом). Результат вывести
# на экран в виде строки из оставшихся названий через пробел.
#P. S. Для считывания списка целиком в программе уже записаны начальные строчки
import sys

# считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# lst_in = ["Муму", "Евгений Онегин", "Сияние",
#           "Мастер и Маргарита", "Пиковая дама", "Колобок"]
# i = 0
# while i != len(lst_in):
#     if lst_in[i].find(" ") > 0:
#         lst_in.remove(lst_in[i])
#         i -= 2
#     i += 1
# print(*lst_in)