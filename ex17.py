# for, range()
d = [0, -42, 2, -33, 64]
for i in range(5):  # range(stop), range(start, stop), range(start,stop,step)
    print(d[i])
print(list(range(5)))
print(list(range(-10, -1, 2)))
print(list(range(-10, -20, -2)))

for i in range(1, 11):
    print('*' * i)

for i, f in enumerate(d):
    if 10 <= abs(f) <= 99:
        d[i] = 0
print(*d)

# iterators
d = [5, 4, 7, 10, 32]
print(d)
it = iter(d)  # итератор для одногкраного перебора элементов списка d
print(iter(d))
print(next(it))  # перебор. Итератор меняет указатель на след. элемент
print(next(it))  # когда доходим до конца, выводится ошибка StopIteration
print(next(it))

s = "python"
it = iter(s)
print(next(it))
print(next(it))
print(next(it))  # итерируемые объекты - строки, списки, range() и тд
r = range(0, 6)
print(r)
it = iter(r)
print(next(it))
print(next(it))
# Механизм итераторов используется в циклах
#############################
# С помощью функции range() сформируйте последовательность чисел
# Результат выведите в виде последовательности чисел, записанных
# через пробел в одну строчку.
# lst = []
# # for i in range(0, 11):
# # for i in range(10, -1, -1):
# # for i in range(-10, -1, 2):
# for i in range(1, 20, 3):
#     lst.append(i)
# print(*lst)

# Вводятся целые числа в одну строчку через пробел.
# Необходимо преобразовать эти данные в список целых чисел.
# Затем, перебрать этот список в цикле for и просуммировать все нечетные
# значения. Результат вывести на экран.
# lst = list(map(int, input().split()))
# s = 0
# for i in range(len(lst)):
#     if lst[i] % 2 != 0:
#         s += lst[i]
# print(s)

# Вводятся названия городов в одну строчку через пробел.
# Необходимо преобразовать входные данные в список. Затем,
# перебрать его циклом for и заменить значения элементов на длину
# названия соответствующего города. Результат вывести на экран в виде
# последовательности чисел через пробел в одну строчку.
# lst = list(input().split())
# for i in range(len((lst))):
#     lst[i] = len(lst[i])
# print(*lst)

# Вводится натуральное число n. С помощью цикла for найти все делители
# этого числа. Найденные делители выводить сразу в столбик без формирования
# списка.
# n = int(input())
# for i in range(1, n + 1):
#     if n % i == 0:
#         print(i)

# Вводится натуральное число n. С помощью цикла for определить,
# является ли оно простым (то есть, делится нацело только на само себя
# и на 1). Вывести на экран ДА, если n простое и НЕТ - в противном случае.
# n = int(input())
# count = 0
# for i in range(1, n + 1):
#     if n % i == 0:
#         count += 1
# if count <= 2:
#     print("ДА")
# else:
#     print("НЕТ")

# Вводится список названий городов в одну строчку через пробел.
# Перебрать все эти названия с помощью цикла for и определить, начинается
# ли название следующего города на последнюю букву предыдущего города в списке.
# Если последними встречаются буквы 'ь', 'ъ', 'ы', то берется следующая с
# конца буква. Вывести на экран ДА, если последовательность удовлетворяет
# этому правилу и НЕТ - в противном случае.
# lst = list(input().split())
# check = False
# for i in range(len(lst)):
#     c = -1
#     if i != 0 and (lst[i - 1][c] == 'ы' or lst[i - 1][c] == 'ь' or lst[i - 1][c] == 'ъ'):
#         c -= 1
#         check = lst[i - 1][c].lower() == lst[i][0].lower()
#     elif i != 0:
#         check = lst[i - 1][c].lower() == lst[i][0].lower()
# if check == True:
#     print("ДА")
# else:
#     print("НЕТ")

# Вводится натуральное число n. Вычислить сумму всех натуральных
# чисел меньше n, которые кратны или 3 или 5. Результат (сумму) вывести
# на экран. Пример: n = 10, имеем числа: 3, 5, 6, 9. Их сумма равна 23.
# n = int(input())
# s = 0
# for i in range(1, n):
#     if i % 3 == 0 or i % 5 == 0:
#         s += i
# print(s)

# Вводится строка. Необходимо найти все индексы фрагмента "ра" во
# введенной строке. Вывести в строку через пробелы найденные индексы.
# Если этот фрагмент ни разу не будет найден, то вывести значение -1.
# s = input()
# el = "ра"
# lst = []
# for i in range(len(s)):
#     lst.append(s.find(el, i))
# print(lst)

# Вводится строка с номером телефона. Ожидается формат ввода:
# +7(xxx)xxx-xx-xx
# где x - это цифра. Размер введенных символов считается верным
# (то есть, не может быть, чтобы отсутствовала какая-либо цифра
# или была лишняя). Необходимо проверить, что введенная строка соответствует
# этому формату. Вывести ДА, если соответствует и НЕТ - в противном случае.
# s = input()
# for i in range(len(s)):
#     if s.find("+7(") == -1 or s.find(")") == -1 or s.find("-") == -1:
#         print("НЕТ")
#         break
#     s = s.replace("+7(", "")
#     s = s.replace(")", "")
#     s = s.replace("-", "")
#     if s.isdigit() == True:
#         print("ДА")
#         break

# Вводится список в виде целых чисел в одну строку через пробел.
# Необходимо сначала сформировать список на основе введенной строки,
# а затем, каждое значение этого списка изменить, возведя в квадрат.
# Отобразить результат на экране в виде строки полученных чисел, записанных
# через пробел. Программу следует реализовать с использованием функции
# enumerate.
# lst = list(map(int, input().split()))
# l = []
# for i, d in enumerate(lst):
#     if d > 0:
#         d = abs(d)
#     l.append(d*d)
# print(*l)

# Вводится список в виде целых чисел в одну строку через пробел.
# Сначала нужно сформировать список из введенной строки. Затем,
# каждый элемент этого списка продублировать один раз. Результат
# отобразить на экране в виде строки полученных чисел, записанных
# через пробел.
# lst = list(map(int, input().split()))
# l = []
# for i, d in enumerate(lst):
#     l.append(d)
#     l.append(d)
#
# print(*l)

# Вводится список в виде вещественных чисел в одну строку через пробел.
# C помощью цикла for необходимо найти наименьшее значение в этом списке.
# Полученный результат вывести на экран.  Реализовать программу без
# использования функции min, max и сортировки.
# lst = list(map(float, input().split()))
# lowest = lst[0]
# for i, d in enumerate(lst):
#     if d < lowest:
#         lowest = d
# print(lowest)

# Вводится список в виде вещественных чисел в одну строку через пробел.
# Сначала нужно сформировать список из введенной строки. Затем, все
# отрицательные значения в этом списке заменить на -1.0. Результат вывести на
# экран в виде строки чисел через пробел. Программу следует реализовать с
# использованием функции enumerate.
# lst = list(map(float, input().split()))
# for i, d in enumerate(lst):
#     if d < 0:
#         lst[i] = -1.0
# print(*lst)

# Вводится список городов в одну строчку через пробел. Необходимо создать
# итератор для этого списка и с помощью итератора вывести на экран в столбик
# первые два значения (названия городов).
# lst = input().split()
# it = iter(lst)
# print(next(it))
# print(next(it))

# Вводится строка. Нужно создать итератор для перебора символов этой строки.
# Затем, перебрать через созданный итератор все символы до первого пробела.
# В процессе перебора символы выводить на экран в одну строчку друг за другом
# (без пробелов). Гарантируется, что во введенной строке имеется хотя бы один
# пробел.
# s = input()
# it = iter(s)
# res = ""
# while True:
#     d = next(it)
#     if d == ' ':
#         break
#     res += d
# print(res)

# Вводится четырехзначное целое положительное число. Подумайте, как можно
# определить итератор для перебора его цифр. Выведите цифры этого введенного
# числа (с помощью итератора) в одну строчку через пробел.
# s = input()
# it = iter(s)
# res = []
# i = 0
# while i < len(s):
#     d = next(it)
#     res.append(d)
#     i += 1
# print(*res)

# Вводится натуральное число N (то есть, положительное, целое). Требуется
# создать двумерный (вложенный) список размером N x N элементов, состоящий
# из всех единиц, а затем, в последний столбец записать пятерки. Вывести этот
# список на экран в виде таблицы чисел, как показано в примере ниже.
# P.S. Будьте внимательны в конце строк пробелов быть не должно!
# n = int(input())
# lst = []
#
# for i in range(n):
#     lst.append([1])
#     for j in range(n-2):
#         lst[i].append(1)
#     lst[i].append(5)
#
# for i, d in enumerate(lst):
#     print(*lst[i])

# Вводится список из URL-адресов (каждый с новой строки).
# Требуется в них заменить все пробелы на символ дефиса (-).
# Следует учесть, что может быть несколько подряд идущих пробелов.
# Результат преобразования вывести на экран в виде строк из URL-адресов.

# s = '''django chto  eto takoe    poryadok ustanovki
# model mtv   marshrutizaciya funkcii  predstavleniya
# marshrutizaciya  obrabotka isklyucheniy       zaprosov perenapravleniya'''
# lst = list(s.split("\n"))
# for i in range(len(lst)):
#     lst[i] = "-".join(lst[i].split())
# it = iter(lst)
# for i in range(len(lst)):
#     print(next(it))

# Вводится натуральное число n. Необходимо найти все простые числа,
# которые меньше этого числа n, то есть, в диапазоне [2; n). Результат
# вывести на экран в строчку через пробел.
# n = int(input())
# lst = []
# flag = False
# for i in range(2,n):
#     flag = False
#     if len(lst) != 0:
#         for j in range(len(lst)):
#             if i % lst[j] == 0:
#                 flag = True
#                 break
#     if flag == False:
#         lst.append(i)
# print(*lst)

##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
# Вводится двумерный список размерностью 5 х 5 элементов, состоящий из нулей
# и, в некоторых позициях, единиц (см. пример ввода ниже). Требуется проверить,
# не касаются ли единицы друг друга по горизонтали, вертикали и диагонали. То
# есть, вокруг каждой единицы должны быть нули. Если проверка проходит вывести
# ДА, иначе - НЕТ.
# lst = [[1, 0, 0, 0, 0],
#        [0, 0, 1, 0, 1],
#        [0, 0, 0, 0, 0],
#        [0, 1, 0, 1, 0],
#        [0, 0, 0, 0, 0]]
# for i in range(len(lst)):
#     for j in range(len(lst[i])):
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
#####################АЛГОРИТМЫ СОРТИРОВКИ И ПЕРЕБОРА##########################
