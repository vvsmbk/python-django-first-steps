# Особенности сортировки через sort() и sorted()
a = [1, -45, 3, 2, 100, -4]
a.sort()  # применим только к спискам и меняет их
print(a)
b = ("faafs", "ssrrf", "agfga")  # кортеж отсортировать нельзя,
b = sorted(b)  # поэтому делаем так
# sorted применим ко всем итеррируемым объектам и не меняет их
print(b)
a = [1, -45, 3, 2, 100, -4]
a.sort()
print(a)
a = [1, -45, 3, 2, 100, -4]
print(sorted(a))

# сорировка по убыванию:
a = [1, -45, 3, 2, 100, -4]
print(sorted(a, reverse=True))
a = [1, -45, 3, 2, 100, -4]
a.sort(reverse=True)
print(a)
# с помощью функции sorted можно сортировать и словари:
d = {1:2, 3:4, 2:5, 5:1}
print(dict(sorted(d.items())))    # сортировка по ключам

########################################################

# На вход поступает список целых чисел, записанных в одну
# строчку через пробел. Преобразуйте сначала эту строку в
# список из целых чисел, а затем список в кортеж из целых
# чисел. То есть, в программе будет две разные коллекции:
# список и кортеж. Отсортируйте по возрастанию значений эти
# коллекции методом sort, если это возможно, а иначе -
# примените функцию sorted.
# На экран ничего выводить не нужно, только сформировать две
# отсортированные коллекции: lst (список) - результат
# сортировки списка; tp_lst (кортеж) - результат сортировки
# кортежа.
# P. S. На результаты сортировок обязательно должны ссылаться
# переменные с именами lst и tp_lst!
lst = list(map(int, "-2 -1 8 11 4 5".split()))
tp_lst = tuple(sorted(tuple(lst)))
lst.sort()


# На вход функции с именем get_sort поступает словарь, например,
# такой:
d = {'cat': 'кот', 'horse': 'лошадь', 'tree': 'дерево',
     'dog': 'собака', 'book': 'книга'}
# Необходимо отсортировать словарь d по убыванию ключей
# (лексикографическая сортировка строк) и возвратить список
# из соответствующих значений ключей словаря. Например, для
# указанного словаря d, результатом должен быть список:
# ['дерево', 'лошадь', 'собака', 'кот', 'книга']
# Сигнатура функции get_sort должна быть следующей:
# def get_sort(d): ...
# В программе только определить функцию, вызывать ее не нужно
# и что-либо выводить на экран тоже не нужно.
# P. S. Подсказка: список в функции get_sort лучше всего
# формировать с помощью генератора списков.

def get_sort(d):
    lst = sorted(d, reverse=True)
    res = []
    for i in lst:
        res.append(d[i])
    return res

# На вход программы поступает список целых чисел, записанных
# в одну строчку через пробел. Необходимо выбрать из них четыре
# наибольших уникальных значения. Результат вывести на экран в
# порядке их убывания в одну строчку через пробел.
# lst = list(set(map(int, input().split())))
# lst.sort(reverse=True)
# for i in range(4):
#     print(lst[i], end=" ")


# На вход программы поступают два списка целых чисел (каждый в
# отдельной строке), записанных в одну строчку через пробел.
# Длины списков могут быть разными. Необходимо первый список
# отсортировать по возрастанию, а второй - по убыванию.
# Полученные пары из обоих списков сложить друг с другом и
# получить новый список чисел. Результат вывести на экран в
# виде строки чисел через пробел.
# P. S. Подсказка: не забываем про функцию zip.

# lst1 = list(set(map(int, input().split())))
# lst1.sort()
# lst2 = list(set(map(int, input().split())))
# lst2.sort(reverse=True)
# res = []
# z = tuple(zip(lst1, lst2))
# for x in z:
#     res.append(x[0]+x[1])
# print(*res)

# На вход программы поступает список товаров в формате:
# название_1:цена_1
# ...
# название_N:цена_N
# Необходимо преобразовать этот список в словарь, ключами
# которого выступают цены (целые числа), а значениями -
# соответствующие названия товаров. Необходимо написать
# функцию, которая бы принимала на входе словарь и возвращала
# список из наименований трех наиболее дешевых товаров.
# Вызовите эту функцию и отобразите на экране полученный
# список в порядке возрастания цены в одну строчку через
# пробел.
# P. S. Для считывания списка целиком в программе уже
# записаны начальные строчки.

lst_in = ["смартфон:120000",
          "яблоко:2",
          "сумка:560",
          "брюки:2500",
          "линейка:10",
          "бумага:500"]
d = {int(l.split(':')[1]):l.split(':')[0] for l in lst_in}

def get_cheapest(d):
    d = dict(sorted(d.items()))
    res = []
    j = 0
    for i in d.items():
        if j == 3:
            break
        res.append(i[1])
        j += 1
    return res
print(*get_cheapest(d))
