# Функции. Их объявления и вызовы

print(print)  # ссылка на функцию
f = print  # объект f ссылается на функцию print
f(2 + 2)  # результат работы объекта, ссылающегося на функцию print


# def <название функции> ([параметры])
    # оператор 1
    # оператор 2
    # ...
    # оператор N
# <название функции> ([аргументы])

def send_mail(to_name):
    text = f"Уважаемый {to_name}! Вы видите результат работы функции."
    print(text)


# по стандарту размер отступа между определением и вызовом функции - два отступа
# refactor - Ctrl + Alt + L
send_mail("Сергей")  # вызов функции
send_mail("Владимир")
print(send_mail)

####################################################

# Задайте функцию, которая не принимает никаких аргументов и просто выводит на
# экран строку: It's my first function
# В конце программы вызовите эту функцию.
def print_text():
    print("It's my first function")


print_text()

# Запишите функцию без аргументов, которая считывает с клавиатуры имя и фамилию,
# записанные в одну строку через пробел, и выводит на экран сообщение
# (без кавычек):
# "Уважаемый, <имя> <фамилия>! Вы верно выполнили это задание!"
# В конце программы вызовите эту функцию.
# name, surname = input().split()
#
# def print_info(name, surname):
#     print(f"Уважаемый, {name} {surname}! Вы верно выполнили это задание!")
#
#
# print_info(name,surname)

#Объявите функцию, которая имеет один параметр - вес предмета и выводит на
# экран сообщение (без кавычек):
# "Предмет имеет вес: x кг."
#где x - переданное значение функции. После объявления функции прочитайте
# (с помощью функции input) вещественное число и вызовите функцию с этим
# значением.

# def print_weight(weight):
#     print(f"Предмет имеет вес: {weight} кг.")
#
#
# print_weight(float(input()))

# Объявите функцию, которая принимает список, находит максимальное, минимальное
# и сумму значений этого списка и выводит результат в виде строки (без кавычек):
# "Min = v_min, max = v_max, sum = v_sum"
# где v_min, v_max, v_sum - вычисленные значения минимального, максимального и
# суммы значений списка.
# После объявления функции прочитайте (с помощью функции input) список целых
# чисел, записанных в одну строку через пробел, и вызовите функцию с этим списком.
# 8 11 5 -10 12 0
# lst = list(map(int,input().split()))
#
# def print_values(lst):
#     v_min = min(lst)
#     v_max = max(lst)
#     v_sum = sum(lst)
#     print(f"Min = {v_min}, max = {v_max}, sum = {v_sum}")
#
#
# print_values(lst)

# Объявите функцию с двумя параметрами width и height (ширина и высота прямоугольника),
# которая выводит сообщение (без кавычек):
# "Периметр прямоугольника, равен x"
# где x - вычисленный периметр прямоугольника. После объявления функции прочитайте
# (с помощью функции input) два целых числа, записанных в одну строку через пробел,
# и вызовите функцию с этими значениями.
# a, b = map(int, input().split())
#
# def print_perimeter(a, b):
#     print(f"Периметр прямоугольника, равен {2*a+2*b}")
#
#
# print_perimeter(a, b)

# Напишите функцию, которая проверяет корректность переданного ей email-адреса
# в виде строки. Будем полагать, что адрес верен, если он обязательно содержит
# символы '@' и '.', а все остальные символы могут принимать значения: 'a-z',
# 'A-Z', '0-9' и '_'. Если email верен, то функция выводит ДА, иначе - НЕТ.
# def check_mail(mail):
#     allow = set("abcdefghijklmnopqrstuvwxyz0123456789_@.")
#     nesessary = {"@", "."}
#     print("ДА") if nesessary <= mail <= allow else print("НЕТ")
#
#
# msg = set(input().lower())
# check_mail(msg)

