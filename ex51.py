# Функция zip. Примеры использования
# zip выполняет перебор для указанных итерируемых
# объектов до тех пор, пока не дойдёт до конца самой короткой
# коллекции
a = [1, 2, 3, 4, 5]
b = [5, 6, 7, 8, 9, 10]
c = "python"

z = zip(a, b, c)
for x in z:
    print(*x)

z1, z2, z3, z4, z5 = zip(a, b, c)
print(z1, z2, z3, z4, z5)
z = list(zip(a, b, c))
print(z)
# можно сделать так:
z = zip(*z)
for x in z:
    print(*x)

#################################################

# Вводятся два списка целых чисел. Необходимо попарно перебрать
# их элементы и перемножить между собой. При реализации
# программы используйте функции zip и map. Выведите на экран
# первые три значения, используя функцию next. Значения
# выводятся в строчку через пробел. (Полагается, что три
# выходных значения всегда будут присутствовать).
# lst1 = list(map(int, input().split()))
# lst2 = list(map(int, input().split()))
# z = zip(lst1, lst2)
# for i in range(3):
#     x = next(z)
#     print(x[0]*x[1], end=' ')

# Вводится неравномерная таблица целых чисел. С помощью
# функции zip выровнить эту таблицу, приведя ее к
# прямоугольному виду, отбросив выходящие элементы.
# Вывести результат на экран в виде такой же таблицы чисел.
# P. S. Для считывания списка целиком в программе уже
# записаны начальные строчки.

lst_in = ['1 2 3 4 5 6',
          '3 4 5 6',
          '7 8 9',
          '9 7 5 3 2']
z = zip(*lst_in)
z = list(zip(z))
for x in z:
    for y in x:
        print(*y)





