# Функции с произвольным числом параметров

m = max(1, 2, 3, 4, 5, 6)  # принимает произвольное число аргументов
print(m)

# ставим * (оператор упаковки аргументов) перед названием переменной
# ставим ** перед переменной, если хотим передать произвольное количество
# именованных аргументов. Коллекция kwargs нужно писать в конце, потому
# что аргументы будут записываться в нее, а не в необходимые параметры
def os_path(disk, *args, sep='\\', **kwargs):
    print(kwargs)
    args = (disk, ) + args
    if 'trim' in kwargs and kwargs['trim']:
        args = [x.strip() for x in args]
    path = sep.join(args)
    print(path)


os_path("F:\\", " ~stepik.org", " Python", "ex31.py ", sep='/', trim=True)

##############################################################

# Объявите функцию с именем get_even, которая принимает произвольное количество
# чисел в качестве аргументов и возвращает список, составленный только из четных
# переданных значений.
# Функцию выполнять не нужно, только определить.
def get_even(*args):
    args = [x for x in args if x % 2 == 0]
    return args

# Объявите функцию с именем get_biggest_city, которой можно передавать
# произвольное количество названий городов через аргументы. Данная функция
# должна возвращать название города наибольшей длины. Если таких городов
# несколько, то первый найденный (из наибольших). Программу реализовать без
# использования сортировки.
# Функцию выполнять не нужно, только определить.
def get_biggest_city(*args):
    l = args[0]
    for x in args:
        if len(x) > len(l):
            l = x
    return l

# Объявите функцию с именем get_data_fig для вычисления периметра произвольного
# N-угольника. На вход этой функции передаются N длин сторон через аргументы.
# Дополнительно могут быть указаны именованные аргументы:
# type - булево значение True/False
# color - целое числовое значение
# closed - булево значение True/False
# width - целое значение
# Функция должна возвращать в виде кортежа периметр многоугольника и указанные
# значения именованных параметров в порядке их перечисления в тексте задания
# (если они были переданы). Если какой-либо параметр отсутствует, его возвращать
# не нужно (пропустить).
# Функцию выполнять не нужно, только определить.
def get_data_fig(*args, **kwargs):
    kwargs = [kwargs[i] for i in ['type', 'color', 'closed', 'width']
              if i in kwargs]
    return (sum(args), *kwargs)

# Объявите функцию с именем str_min, которая сравнивает две переданные строки и
# возвращает минимальную из них (то есть, выполняется лексикографическое
# сравнение строк). Затем, используя функциональный подход к программированию
# (то есть, более сложные функции реализуются путем вызова более простых),
# реализовать еще две аналогичные функции:
# - с именем str_min3 для поиска минимальной строки из трех переданных строк;
# - с именем str_min4 для поиска минимальной строки из четырех переданных строк.
# Выполнять функции не нужно, только записать.
def str_min(s1, s2):
    return min(s1, s2)


def str_min3(s1, *args):
    s2 = str_min(*args)
    return min(s1, s2)


def str_min4(s1, *args):
    s2 = str_min3(*args)
    return min(s1, s2)